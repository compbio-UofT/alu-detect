#!/bin/bash
source lib.alu-detect.sh
set -eEu -o pipefail

data_dir=$BASE_DIR/data

usage () {
    echo "Use: $(basename $0) <ref_name> [ <fake_ref_name> ]"
}

if [ $# -ne 1 ] && [ $# -ne 2 ]; then
    usage >&2
    exit
fi

[[ "$1" =~ ^[[:alnum:]_-]*$ ]] || crash "illegal character in reference name [$1]"
[ $# -eq 1 ] || [[ "$2" =~ ^[[:alnum:]_-]*$ ]] ||
crash "illegal character in reference name [$2]"

set_real_and_fake_ref_var_names $1 ${2:-}
check_files_readable "$real_ref_fa" "$real_ref_fai" \
    "$real_ref_bt2_idx".{{1..4},rev.{1..2}}.bt2 "$real_ref_alus_bed"


START_STAGE=${START_STAGE:-1}
END_STAGE=${END_STAGE:-100}
make_note "using START_STAGE=$START_STAGE and END_STAGE=$END_STAGE"


#
# step 1: annotate tsd-s
#
STAGE_NUM=1
STAGE_NAME="annotate tsd-s in reference alus"
INPUT_FILES="$real_ref_fa $real_ref_alus_bed"
OUTPUT_FILES="$real_ref_alus_tsd_bed"
stage_command() {
    tsd-search -N $NCPU "$real_ref_fa" "$real_ref_alus_bed" |
    $ZIP >"$real_ref_alus_tsd_bed"
}
run_stage

#
# step 2: select alu deletions
#
STAGE_NUM=2
STAGE_NAME="select alus to delete"
INPUT_FILES="$real_ref_alus_tsd_bed"
OUTPUT_FILES="$real_deletions_bed $real_alus_to_remove_bed $fake_known_novel_alus_bed"
stage_command() {
    zc "$real_ref_alus_tsd_bed" |
    grep AluY |
    filter-length 310 |
    awk '$10>0 && $10==$12' |
    tawk '$6=="+" && $9==0 && $11<20 {$3+=$11; print} $6=="-" && $11==0 && $9<20 {$2-=$9; print}' |
    cut -f 1-8,10 |
    tee-p "$real_alus_to_remove_bed" |
    tawk '{$3+=$9} 1' >"$real_deletions_bed"
    real-to-fake "$real_deletions_bed" "$real_known_novel_alus_bed" >"$fake_known_novel_alus_bed"
}
run_stage

#
# step 3
#
STAGE_NUM=3
STAGE_NAME="compute alu targets"
INPUT_FILES="$real_alus_to_remove_bed"
OUTPUT_FILES="$fake_targets_bed"
stage_command() {
    tawk '{$2-=$9+1; $3+=$9+1} 1' "$real_alus_to_remove_bed" |
    real-to-fake "$real_deletions_bed" - >"$fake_targets_bed"
}
run_stage

#
# step 4
#
STAGE_NUM=4
STAGE_NAME="build fake reference fasta file"
INPUT_FILES="$real_ref_fa $real_deletions_bed"
OUTPUT_FILES="$fake_ref_fa"
stage_command() {
    make-fake-ref-fasta "$real_deletions_bed" "$real_ref_fa" >"$fake_ref_fa"
    samtools faidx "$fake_ref_fa"
}
run_stage

#
# step 5
#
STAGE_NUM=5
STAGE_NAME="build bowtie2 indexes for fake reference"
INPUT_FILES="$fake_ref_fa"
OUTPUT_FILES="$fake_ref_bt2_idx.1.bt2"
stage_command() {
    bowtie2-build "$fake_ref_fa" "$fake_ref_bt2_idx"
}
run_stage

#
# step 6
#
STAGE_NUM=6
STAGE_NAME="annotate repeats in fake reference"
INPUT_FILES="$fake_ref_fa"
OUTPUT_FILES="$fake_ref_fa.out"
stage_command() {
    pushd ${TMPDIR:-/tmp} 2>/dev/null
    RepeatMasker -pa $NCPU -s "$fake_ref_fa"
    popd 2>/dev/null
}
run_stage

#
# stage 7
#
STAGE_NUM=7
STAGE_NAME="add fake reference to alu-detect"
INPUT_FILES="$fake_ref_fa $fake_ref_bt2_idx.1.bt2 $fake_ref_fa.out"
OUTPUT_FILES="$fake_ref_alus_bed"
stage_command() {
    $BASE_DIR/alu-detect add-ref -o $fake_ref_fa.out $fake_ref_name
}
run_stage
