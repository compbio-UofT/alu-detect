#!/usr/bin/env python
import signal
signal.signal(signal.SIGPIPE, signal.SIG_DFL)

import sys
import argparse
import functools
from lib_alu_detect import *
import lib_alu_detect_sam as sam


parser = argparse.ArgumentParser(description=sys.argv[0])
parser.add_argument('-v', '--verbose', action='append_const', const=1, default=[], dest='verbose')
parser.add_argument('--cid-parser', action='store', dest='cid_parser')
parser.add_argument('input', action='store', default='-', nargs='?')
args = parser.parse_args()
set_log_level(len(args.verbose))

if args.cid_parser:
    _temp = __import__(args.cid_parser, globals(), locals(), ['cid_parser'])
    cid_parser = _temp.cid_parser
else:
    cid_parser = sam.default_cid_parser


in_fd = gzopen(args.input)
d = {}

for line in in_fd:
    line = line.strip()
    if line[0] == '@':
        print line
        continue
    a = line.split('\t')
    flag = int(a[1])
    if (flag & 0x1 == 0):
        # unpaired: pass through
        print line
    else:
        # paired: wait for mate
	m = cid_parser(a[0])
        if m['clone_id'] in d:
            print d[m['clone_id']]
            print line
            del d[m['clone_id']]
        else:
            d[m['clone_id']] = line

if len(d) > 0:
    print >> sys.stderr, 'warning: some paired reads missed mate mappings: ' + str(d[d.keys()[0]])

#for k in d.keys():
#    print d[k]

gzclose(in_fd)
