#!/bin/bash
[ "$BASE_DIR" ] ||
{
    echo "run this script through alu-detect wrapper" >&2
    exit 1
}
source lib.alu-detect.sh
set -eEu -o pipefail

usage () {
    echo "Use: $(basename $0) <ngs_name> <real_ref_name> <fake_ref_name> <real_ref_calls_dir> <fake_ref_calls_dir>"
}

if [ $# -ne 5 ]; then
    usage >&2
    exit
fi

export NGS_NAME=$1
real_ref_name=$2
export REAL_REF_NAME=$real_ref_name
fake_ref_name=$3
real_calls_dir=$4
fake_calls_dir=$5

set_real_and_fake_ref_var_names $real_ref_name $fake_ref_name
check_files_readable "$real_ref_fa" "$real_ref_fai" \
    "$real_ref_bt2_idx".{{1..4},rev.{1..2}}.bt2 "$real_ref_alus_bed" "$real_calls_dir"
check_files_readable "$fake_ref_fa" "$fake_ref_fai" \
    "$fake_ref_bt2_idx".{{1..4},rev.{1..2}}.bt2 "$fake_ref_alus_bed" "$fake_calls_dir"

filtered_real_calls_bed=$real_calls_dir/$NGS_NAME.$real_ref_name.calls.ref-alu-bp.bed
clean_fake_calls_bed=$fake_calls_dir/$NGS_NAME.$fake_ref_name.calls.clean.bed
filtered_fake_calls_bed=$fake_calls_dir/$NGS_NAME.$fake_ref_name.calls.ref-alu-bp.bed
filtered_fake_calls_near_alus_bed=$fake_calls_dir/$NGS_NAME.$fake_ref_name.calls.near-clear-alus.ref-alu-bp.bed
check_files_readable "$filtered_real_calls_bed" "$clean_fake_calls_bed" "$filtered_fake_calls_bed"


# build lists of calls and truth to compare
export CALLS_LIST="$filtered_fake_calls_bed"
export CALLS_FILTER_LIST=":filter-bp 1:filter-bp 2"
export TRUTH_LIST="$fake_targets_bed"
export TRUTH_LEN_LIST="$(wc -l <$fake_targets_bed)"

if [ -r "$real_known_novel_alus_bed" ]; then
    make_note "real known novel alus: found"
    CALLS_LIST=$CALLS_LIST";$filtered_real_calls_bed"
    CALLS_FILTER_LIST=$CALLS_FILTER_LIST";:filter-bp 1:filter-bp 2"
    TRUTH_LIST=$TRUTH_LIST";$real_known_novel_alus_bed"
    TRUTH_LEN_LIST=$TRUTH_LEN_LIST";$(wc -l <$real_known_novel_alus_bed)"
else
    make_note "real known novel alus: not found"
fi

if [ -r "$filtered_fake_calls_near_alus_bed" ] && [ -r "$fake_targets_near_alus_bed" ]; then
    make_note "fake calls near alus: found"
    CALLS_LIST=$CALLS_LIST";$filtered_fake_calls_near_alus_bed"
    CALLS_FILTER_LIST=$CALLS_FILTER_LIST";:filter-bp 1:filter-bp 2"
    TRUTH_LIST=$TRUTH_LIST";$fake_targets_near_alus_bed"
    TRUTH_LEN_LIST=$TRUTH_LEN_LIST";$(wc -l <$fake_targets_near_alus_bed)"
else
    make_note "fake calls near alus: not found"
fi

if [ "${OTHER_REAL_TRUTH:-}" ]; then
    make_note "other real truth: found"
    CALLS_LIST=$CALLS_LIST";$filtered_real_calls_bed"
    CALLS_FILTER_LIST=$CALLS_FILTER_LIST";:filter-bp 1:filter-bp 2"
    TRUTH_LIST=$TRUTH_LIST";$OTHER_REAL_TRUTH"
    TRUTH_LEN_LIST=$TRUTH_LEN_LIST";$(wc -l <$OTHER_REAL_TRUTH)"
else
    make_note "other real truth: not found"
fi

# step 5: try various filters, adapting
STAGE_NUM=5
STAGE_NAME="try various filters, adapting"
table_filters=$NGS_NAME.$real_ref_name.table.csv
INPUT_FILES="$filtered_fake_calls_bed $filtered_real_calls_bed"
OUTPUT_FILES="$table_filters"
stage_command() {
    export WORK_DIR=$NGS_NAME.$real_ref_name.table.dir
    mkdir -p $WORK_DIR
    export NULL_VALS=${NULL_VALS:-$(seq -s " " 0 50 300)}
    export CI_LEN_VALS=${CI_LEN_VALS:-$(seq -s " " 300 200 1100)}
    export OUTPUT_FD=3

    abs_len_min=150
    abs_len_max=290
    abs_supp_min=5
    abs_supp_max=30
    len_safety=50
    len_step=10
    supp_safety=5
    supp_step=1

    len_min=${len_min:-$abs_len_min}
    len_max=${len_max:-$abs_len_max}
    supp_min=${supp_min:-$abs_supp_min}
    supp_max=${supp_max:-$abs_supp_max}

    while true; do
	log_file=$NGS_NAME.$real_ref_name.table.len${len_min}-${len_max}.supp${supp_min}-${supp_max}.log
	export LEN_VALS=$(seq -s " " $len_min $len_step $len_max)
	export SUPP_VALS=$(seq -s " " $supp_min $supp_step $supp_max)
	make_note "trying len${len_min}-${len_max} supp${supp_min}-${supp_max}"

	run-filters.parallel "$NCPU" 3>>$table_filters >$WORK_DIR/$log_file 2>&1

	top_filter=($(get-top-filter $table_filters))
	if [ "${#top_filter[*]}" -eq 0 ]; then
	    if [ $supp_max -lt $abs_supp_max ]; then
		let supp_max+=$supp_safety
		[ $supp_max -le $abs_supp_max ] || supp_max=$abs_supp_max
		make_note "no suitable filters; increasing support"
		continue
	    else
		make_note "no suitable filters and maximum support!"
		break
	    fi
	fi

	make_note "top filter: ${top_filter[@]}"

	done_here=1
	[ $len_max -ge $abs_len_max ] ||
	[ $((${top_filter[0]} + $len_safety)) -le $len_max ] || done_here=
	[ $len_min -le $abs_len_min ] ||
	[ $((${top_filter[0]} - $len_safety)) -ge $len_min ] || done_here=
	[ $((${top_filter[1]} + $supp_safety)) -le $supp_max ] || done_here=
	[ $supp_min -le $abs_supp_min ] ||
	[ $((${top_filter[1]} - $supp_safety)) -ge $supp_min ] || done_here=
	[ ! $done_here ] || break

	let len_max=${top_filter[0]}+$len_safety
	[ $len_max -le $abs_len_max ] || len_max=$abs_len_max
	let len_min=${top_filter[0]}-$len_safety
	[ $len_min -ge $abs_len_min ] || len_min=$abs_len_min
	let supp_max=${top_filter[1]}+$supp_safety
	let supp_min=${top_filter[1]}-$supp_safety
	[ $supp_min -ge $abs_supp_min ] || supp_min=$abs_supp_min
    done
}
run_stage


# step 6: filter real calls based on top filter
STAGE_NUM=6
STAGE_NAME="filter real calls based on top filter"
real_calls=$NGS_NAME.$real_ref_name.calls.filtered
INPUT_FILES="$filtered_real_calls_bed $table_filters"
OUTPUT_FILES="$real_calls"
stage_command() {
    apply-filter $(get-top-filter "$table_filters") <"$filtered_real_calls_bed" >"$real_calls".bed
}
run_stage


# step 7: filter fake calls based on top filter
STAGE_NUM=7
STAGE_NAME="filter fake calls based on top filter"
fake_calls=$NGS_NAME.$fake_ref_name.calls.filtered
INPUT_FILES="$filtered_fake_calls_bed $table_filters"
OUTPUT_FILES="$fake_calls"
stage_command() {
    apply-filter $(get-top-filter "$table_filters") <"$filtered_fake_calls_bed" >"$fake_calls".bed
}
run_stage
