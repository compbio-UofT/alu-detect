#!/usr/bin/env python
import signal
signal.signal(signal.SIGPIPE, signal.SIG_DFL)

import sys
import argparse
import bisect
from lib_alu_detect import *

delta = 50


def load_deletions(s):
    f = gzopen(s)
    d = dict()
    for l in f:
        l = l.strip().split('\t')
        if l[0] not in d:
            d[l[0]] = [[[], []], [[], []]]
        if l[5] == '+':
            st = 0
        else:
            st = 1
        d[l[0]][st][0].append(int(l[1]))
        d[l[0]][st][1].append(int(l[2]))
    gzclose(f)
    for chr in d:
        d[chr][0][0].sort()
        d[chr][0][1].sort()
        d[chr][1][0].sort()
        d[chr][1][1].sort()
    return d


parser = argparse.ArgumentParser(description=sys.argv[0])
parser.add_argument('-v', '--verbose', action='append_const', const=1, default=[], dest='verbose')
parser.add_argument('-d', '--delta', action='store', type=int, default=delta, dest='delta')
#parser.add_argument('-o', '--original-coordinates', action='store_true', default=False, dest='orig_coord')
parser.add_argument('alus_file', action='store')
parser.add_argument('input_file', action='store')
args = parser.parse_args()
set_log_level(len(args.verbose))

delta = args.delta
note('using delta=' + str(delta), 1)


refAlus = load_deletions(args.alus_file)

def check_not_overlap(refAlus, curLine):
    ambiguous_insert = False
    ins_start = int(curLine[2])
    ins_end = int(curLine[1])
    # check insert start endpoint
    i = bisect.bisect_left(refAlus[0], ins_start - delta)
    left_end = curLine[9]
    if i < len(refAlus[0]) and refAlus[0][i] < ins_start + delta:
        # insert start is ambiguous
        ambiguous_insert = True
        left_end = '0'
    # check insert end endpoint
    i = bisect.bisect_left(refAlus[1], ins_end - delta)
    right_end = curLine[10]
    if i < len(refAlus[1]) and refAlus[1][i] < ins_end + delta:
        # insert end is ambiguous
        ambiguous_insert = True
        right_end = '0'
    res = not ambiguous_insert or left_end != '0' or right_end != '0'
    if not res:
        note('filtering out:' + '\t'.join(curLine), 1)
    return res


g = gzopen(args.input_file)
for line in g:
    line = line.strip().split('\t')
    chr = line[0]
    if line[5] == '+':
        st = 0
    else:
        st = 1
    if chr not in refAlus.keys() or check_not_overlap(refAlus[chr][st], line):
        print '\t'.join(line)
gzclose(g)
