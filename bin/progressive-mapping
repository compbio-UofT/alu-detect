#!/bin/bash
source lib.alu-detect.sh
set -eEu -o pipefail


# don't trust the user; check most settings
cmd_exists samtools || crash "samtools not found"
cmd_exists bowtie2 || crash "bowtie2 not found"
check_files_readable "$BOWTIE2_INDEX".{{1..4},rev.{1,2}}.bt2


DEBUG=${DEBUG:-}

TRIM_STEP=5
MIN_LEN=20
MIN_MQV=5
MAPPER_CMD="bowtie2-sort -x $BOWTIE2_INDEX -p $NCPU -U"
export SORT_OPTIONS="-S 10G"

find_my_name_and_dir "${BASH_SOURCE[0]}"
make_temp_dir "$MY_NAME"
make_note "using TDIR=$TDIR"

get_input_reads () {
    if [ "$PV" ]; then
	$PV "${input_reads_1[@]}" | zc
    else
	exec zc "${input_reads_1[@]}"
    fi |
    if [ ${#input_reads_2[@]} -gt 0 ]; then
	exec merge-files 4:- 4:<(exec zc "${input_reads_2[@]}")
    else
	exec cat
    fi
}

input_reads_1=($(ls $1))
if [ "${2:-}" ]; then
    input_reads_2=($(ls $2))
    [ ${#input_reads_1[@]} -eq ${#input_reads_2[@]} ] ||
    crash "non matching read files: [${input_reads_1[@]}] vs [${input_reads_2[@]}]"
else
    input_reads_2=()
fi

make_note "using input_reads_1: ${input_reads_1[@]}"
make_note "using input_reads_2: ${input_reads_2[@]:-}"

PREV_STEP=0
CRT_STEP=1
CRT_TRIM=0
CRT_TRIM_SIDE=3p
SWITCH_SIDES=0

mkfifo "$TDIR"/pipe-3
mkfifo "$TDIR"/pipe-4
mkfifo "$TDIR"/pipe-5
mkfifo "$TDIR"/pipe-6
mkfifo "$TDIR"/pipe-7

while true ; do
    pids=()
    if [ $CRT_TRIM -eq 0 ] ; then
	make_note "preparing reads..."
	get_input_reads >"$TDIR"/pipe-3 &
	pids+=($!)
    elif [ $SWITCH_SIDES -eq 1 ] ; then
	make_note "switching sides; extracting unmapped and badly mapped reads..."
	merge-recursively -z "$TDIR"/bad-3p_*.id.gz "$TDIR"/short-3p_*.id.gz |
	join -t "	" -j 1 - <(PV= get_input_reads | fq-convert -v ofq=tfq) |
	tawk '{n=split($1,a,":"); a[6]="1"; $1=a[1]; for(i=2;i<=n;i++) $1=$1 ":" a[i]; print}' |
	fq-trim-reads-relative -v ofq=fq -v trim_len_${CRT_TRIM_SIDE}=$TRIM_STEP >"$TDIR"/pipe-3 &
	pids+=($!)
    else
	make_note "processing previous stage..."
	$PV "$TDIR"/map_body_${PREV_STEP}.sam.gz |
	zc "$TDIR"/map_header_${PREV_STEP}.sam - |
	add-extra-sam-flags -N 4 -q $MIN_MQV -i 0 |
	filter-mappings -N 4 \
	    -f 0x1000:"$TDIR"/pipe-4 \
	    -f 0/0x1004:"$TDIR"/pipe-5 \
	    -f 0x4:\&1 |
	sam-to-fq |
	fq-trim-reads-relative -v trim_len_${CRT_TRIM_SIDE}=$TRIM_STEP >"$TDIR"/pipe-3 &
	pids+=($!)
	$ZIP <"$TDIR"/pipe-4 >"$TDIR"/final-${CRT_TRIM_SIDE}_${PREV_STEP}.sam.gz &
	pids+=($!)
	<"$TDIR"/pipe-5 cut -f 1 | $ZIP >"$TDIR"/bad-${CRT_TRIM_SIDE}_${PREV_STEP}.id.gz &
	pids+=($!)
    fi

    # remove short reads
    fq-remove-short-reads <"$TDIR"/pipe-3 -v min_len=$MIN_LEN -v short_reads_fd=3 \
	3>"$TDIR"/pipe-6 |
    tee-p "$TDIR"/pipe-7 |
    $ZIP >"$TDIR"/reads_${CRT_STEP}.fq.gz &
    pids+=($!)
    <"$TDIR"/pipe-6 cut -f 1 |
    $ZIP >"$TDIR"/short-${CRT_TRIM_SIDE}_${CRT_STEP}.id.gz &
    pids+=($!)
    fq-stats <"$TDIR"/pipe-7 >"$TDIR"/reads_${CRT_STEP}.stats &
    pids+=($!)

    #
    # sync at this point
    #
    for pid in ${pids[@]}; do
	wait $pid
    done

    # clean up to keep space reasonable
    if [ $CRT_TRIM -ne 0 ]; then
	if [ $SWITCH_SIDES -eq 1 ]; then
	    [ $DEBUG ] || rm "$TDIR"/bad-3p_*.id.gz "$TDIR"/short-3p_*.id.gz
	    SWITCH_SIDES=0
	else
	    [ $DEBUG ] || rm "$TDIR"/map_body_${PREV_STEP}.sam.gz
	fi
    fi

    if [ $(head -n 1 "$TDIR"/reads_${CRT_STEP}.stats | cut -d " " -f 1) -eq 0 ] ; then
	if [ $CRT_TRIM_SIDE = 3p ] ; then
	    PREV_STEP=$CRT_STEP
	    CRT_STEP=$(($CRT_STEP + 1))
	    CRT_TRIM=$TRIM_STEP
	    CRT_TRIM_SIDE=5p
	    SWITCH_SIDES=1
	    make_note "done with 3p side, starting 5p side"
	    continue
	else
	    break
	fi
    fi

    make_note "step:$CRT_STEP	trim:$CRT_TRIM	trim_side:$CRT_TRIM_SIDE	reads left:$(head -n 1 "$TDIR"/reads_${CRT_STEP}.stats | cut -d " " -f 1)"

    # map current batch
    make_note "mapping current batch and sorting..."
    $PV "$TDIR"/reads_${CRT_STEP}.fq.gz |
    zc |
    $MAPPER_CMD - |
    tee-p >(sam-header >"$TDIR"/map_header_${CRT_STEP}.sam) |
    sam-body |
    $ZIP >"$TDIR"/map_body_${CRT_STEP}.sam.gz
    [ $DEBUG ] || rm "$TDIR"/reads_${CRT_STEP}.fq.gz

    PREV_STEP=$CRT_STEP
    CRT_STEP=$(($CRT_STEP + 1))
    CRT_TRIM=$(($CRT_TRIM + $TRIM_STEP))
done

cat "$TDIR"/map_header_1.sam

merge-recursively -z "$TDIR"/final-*_*.sam.gz \
    "$TDIR"/bad-5p_*.id.gz "$TDIR"/short-5p_*.id.gz |
tawk '{split($1,a,":"); print a[1] ":" a[2] ":" a[3], $0}' |
join -t "	" -j 1 \
    <(PV= get_input_reads |
    fq-convert -v ofq=tfq |
    tawk '{split($1,a,":"); print a[1] ":" a[2] ":" a[3], $0}') - |
fix-mappings |
cut -f 6-

[ $DEBUG ] || rm -rf "$TDIR"
