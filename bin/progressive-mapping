#!/bin/bash
. lib.alu-detect.sh
set -eEx -o pipefail
explicit_errtrap

remove_tail() {
    sed "s/${TAIL_SED_REGEXP}//g"
}

id_to_unmapped_sam() {
    remove_tail | awk -v other="${1:-}" 'BEGIN{OFS="\t"} {if(match($1,"/[12]$"))$1=substr($1,1,length($1)-2); printf("%s\t4\t*\t0\t0\t*\t*\t0\t0\t*\t*", $1); if(other!="")printf("\t%s", other); printf("\n");}'
}

which samtools >/dev/null 2>&1 || crash "samtools not found"
which bowtie2 >/dev/null 2>&1 || crash "bowtie2 not found"
for suffix in .1.bt2 .2.bt2 .3.bt2 .4.bt2 .rev.1.bt2 .rev.2.bt2; do
    [ -r "$BOWTIE2_INDEX$suffix" ] || crash "bowtie2 index file missing: $BOWTIE2_INDEX$suffix"
done


TRIM_STEP=5
MIN_LEN=20
MIN_MQV=5
NCPU="${NCPU:-4}"

if pv --version >/dev/null 2>/dev/null ; then
    PV="pv -f"
else
    PV=cat
fi

if pigz --version >/dev/null 2>/dev/null ; then
    ZIP="pigz -9 -p $NCPU"
else
    ZIP=gzip
fi

MAPPER_CMD="bowtie2 -x $BOWTIE2_INDEX -M 10 -p $NCPU -U"
TAIL_SED_REGEXP="${TAIL_SED_REGEXP:-\/[12]$}"
make_note "using TAIL_SED_REGEXP=$TAIL_SED_REGEXP"

find_my_name_and_dir "${BASH_SOURCE[0]}"
make_temp_dir "$MY_NAME"
make_note "using TDIR=$TDIR"

if [ -f "$1" ] ; then
    READS_FILE="$1"
else
    READS_FILE="$TDIR"/reads.fq.gz
    make_note "copying reads to tmp..."
    $PV "$@" | zc | $ZIP >"$READS_FILE"
fi
make_note "using reads file: $READS_FILE"

PREV_STEP=0
CRT_STEP=1
CRT_TRIM=0
CRT_TRIM_SIDE=3p
SWITCH_SIDES=0

mkfifo "$TDIR"/pipe-3
mkfifo "$TDIR"/pipe-4
mkfifo "$TDIR"/pipe-5
mkfifo "$TDIR"/pipe-6
mkfifo "$TDIR"/pipe-7

while true ; do
    pids=()
    if [ $CRT_TRIM -eq 0 ] ; then
	make_note "preparing reads..."
	$PV "$READS_FILE" | zc | add-seq-to-read-name >"$TDIR"/pipe-3 &
	pids+=($!)
    elif [ $SWITCH_SIDES -eq 1 ] ; then
	make_note "switching sides; extracting unmapped and badly mapped reads..."
	$PV "$TDIR"/bad-3p_*.sam.gz "$TDIR"/short-3p_*.sam.gz \
	    | zc | cut -f 1 | get-seq-from-read-name -v ofq=fq \
	    | fq-trim-reads-relative -v trim_len_${CRT_TRIM_SIDE}=$TRIM_STEP >"$TDIR"/pipe-3 &
	pids+=($!)
	SWITCH_SIDES=0
    else
	make_note "processing previous stage..."
	$PV "$TDIR"/map_body_${PREV_STEP}.sam.gz \
	    | zc "$TDIR"/map_header_${PREV_STEP}.sam - \
	    | add-extra-sam-flags -N 4 -q $MIN_MQV -i 0 \
	    | filter-mappings -N 4 \
	      -f 0x1000:"$TDIR"/pipe-4 \
	      -f 0/0x1004:"$TDIR"/pipe-5 \
	      -f 0x4:\&1 \
	    | sam-to-fq \
	    | fq-trim-reads-relative -v trim_len_${CRT_TRIM_SIDE}=$TRIM_STEP >"$TDIR"/pipe-3 &
	pids+=($!)
	$ZIP <"$TDIR"/pipe-4 >>"$TDIR"/final-${CRT_TRIM_SIDE}_${PREV_STEP}.sam.gz &
	pids+=($!)
	$ZIP <"$TDIR"/pipe-5 >>"$TDIR"/bad-${CRT_TRIM_SIDE}_${PREV_STEP}.sam.gz &
	pids+=($!)
    fi

    # remove short reads
    fq-remove-short-reads <"$TDIR"/pipe-3 -v min_len=$MIN_LEN \
	2>"$TDIR"/pipe-6 | tee-p "$TDIR"/pipe-7 | $ZIP >"$TDIR"/reads_${CRT_STEP}.fq.gz &
    pids+=($!)
    id_to_unmapped_sam <"$TDIR"/pipe-6 | $ZIP >"$TDIR"/short-${CRT_TRIM_SIDE}_${CRT_STEP}.sam.gz &
    pids+=($!)
    fq-stats <"$TDIR"/pipe-7 >"$TDIR"/reads_${CRT_STEP}.stats &
    pids+=($!)

    #
    # sync at this point
    #
    i=0
    while [ $i -lt ${#pids[@]} ]; do
	wait ${pids[$i]}
	let i+=1
    done

    if [ $(head -n 1 "$TDIR"/reads_${CRT_STEP}.stats | cut -d " " -f 1) -eq 0 ] ; then
	if [ $CRT_TRIM_SIDE = 3p ] ; then
	    PREV_STEP=$CRT_STEP
	    CRT_STEP=$(($CRT_STEP + 1))
	    CRT_TRIM=$TRIM_STEP
	    CRT_TRIM_SIDE=5p
	    SWITCH_SIDES=1
	    make_note "done with 3p side, starting 5p side"
	    continue
	else
	    break
	fi
    fi

    make_note "step:$CRT_STEP	trim:$CRT_TRIM	trim_side:$CRT_TRIM_SIDE	reads left:$(head -n 1 "$TDIR"/reads_${CRT_STEP}.stats | cut -d " " -f 1)"

    # map current batch
    make_note "mapping current batch and sorting..."
    $PV "$TDIR"/reads_${CRT_STEP}.fq.gz | zc \
        | $MAPPER_CMD - \
	| sam-fix-bowtie-read-names \
        | tee-p >(sam-header >"$TDIR"/map_header_${CRT_STEP}.sam) \
	| sam-body \
	| sort -S 4G -s -t ':' -k 1,1n -k 2,2n \
	| $ZIP >"$TDIR"/map_body_${CRT_STEP}.sam.gz

    PREV_STEP=$CRT_STEP
    CRT_STEP=$(($CRT_STEP + 1))
    CRT_TRIM=$(($CRT_TRIM + $TRIM_STEP))
done

cat "$TDIR"/map_header_1.sam

{
    make_note "gathering good 3p-trimmed mappings..."
    $PV "$TDIR"/final-3p_*.sam.gz \
	| zc \
	| sam-add-trim-len-to-cigar -v trim_side=3p
    make_note "gathering good 5p-trimmed mappings..."
    $PV "$TDIR"/final-5p_*.sam.gz \
	| zc \
	| sam-add-trim-len-to-cigar -v trim_side=5p
    make_note "gathering bad 5p-trimmed mappings..."
    $PV "$TDIR"/bad-5p_*.sam.gz \
	| zc | cut -f 1 | id_to_unmapped_sam
    make_note "gathering short 5p-trimmed mappings..."
    $PV "$TDIR"/short-5p_*.sam.gz \
	| zc
    make_note "sorting..."
} | sort -S 4G -s -t ':' -k 1,1n -k 2,2n
rm -rf "$TDIR"
