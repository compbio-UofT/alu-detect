#!/bin/bash
[ "$BASE_DIR" ] ||
{
    echo "run this script through alu-detect wrapper" >&2
    exit 1
}
source lib.alu-detect.sh
set -eEu -o pipefail

usage () {
    echo "Use: $(basename $0) <ngs_name> <ref_name>"
}

if [ $# -ne 2 ]; then
    usage >&2
    exit
fi


# don't trust the user; check global settings
(cmd_exists python && [ "$(python --version 2>&1 | cut -d '.' -f 2)" -ge 6 ]) ||
crash "python2.6+ not found"
cmd_exists samtools || crash "samtools not found"
cmd_exists bedtools || crash "bedtools not found"
cmd_exists bowtie2 || crash "bowtie2 not found"
cmd_exists gmapper-ls || crash "gmapper not found"
check_files_readable "$alus_fa" "$alus_no_polya_fa"


ngs_name=$1
ref_name=$2
set_ref_var_names "$ref_name"
check_files_readable "$ref_fa" "$ref_fai" \
    "$ref_bt2_idx".{{1..4},rev.{1..2}}.bt2 "$ref_alus_bed"
prefix=$ngs_name.$ref_name
sample=${SAMPLE:-$ngs_name}


make_note "using NCPU=$NCPU"
START_STAGE=${START_STAGE:-0}
END_STAGE=${END_STAGE:-100}
make_note "using START_STAGE=$START_STAGE and END_STAGE=$END_STAGE"


if [ $START_STAGE -lt 3 ]; then
    # need original mappings
    ORIG_UNPAIRED_READS=${ORIG_UNPAIRED_READS:-}
    ORIG_PAIRED_READS=${ORIG_PAIRED_READS:-}
    ORIG_READS_1=${ORIG_READS_1:-}
    ORIG_READS_2=${ORIG_READS_2:-}
    ORIG_READ_GROUPS=${ORIG_READ_GROUPS:-}
    ORIG_MAPPINGS=${ORIG_MAPPINGS:-}
    make_note "using unpaired reads file(s): [$ORIG_UNPAIRED_READS]"
    make_note "using paired reads file(s): [$ORIG_PAIRED_READS]"
    make_note "using reads_1 file(s): [$ORIG_READS_1]"
    make_note "using reads_2 file(s): [$ORIG_READS_2]"
    make_note "using reads group(s): [$ORIG_READ_GROUPS]"
    make_note "using mapping file(s): [$ORIG_MAPPINGS]"
    make_note "dropping pairs mapped to different chromosomes: $(([ ${DROP_PAIRS_DIFF_CHR:-} ] && echo "yes") || echo "no")"

    orig_unpaired_reads=($(echo $ORIG_UNPAIRED_READS))
    orig_paired_reads=($(echo $ORIG_PAIRED_READS))
    orig_reads_1=($(echo $ORIG_READS_1))
    orig_reads_2=($(echo $ORIG_READS_2))
    orig_read_groups=($(echo $ORIG_READ_GROUPS))
    orig_mappings=($(echo $ORIG_MAPPINGS))

    have_unpaired_reads=0
    if [[ ${#orig_unpaired_reads[@]} -ne 0 &&
	${#orig_unpaired_reads[@]} -eq ${#orig_read_groups[@]} ]]; then
	have_unpaired_reads=1
	make_note "found unpaired reads"
    fi

    have_paired_reads_single=0
    if [[ ${#orig_paired_reads[@]} -ne 0 &&
	${#orig_paired_reads[@]} -eq ${#orig_read_groups[@]} ]]; then
	have_paired_reads_single=1
	make_note "found paired reads in single file(s)"
    fi

    have_paired_reads_double=0
    if [[ ${#orig_reads_1[@]} -ne 0 &&
	${#orig_reads_1[@]} -eq ${#orig_read_groups[@]} &&
	${#orig_reads_2[@]} -eq ${#orig_read_groups[@]} ]]; then
	have_paired_reads_double=1
	make_note "found paired reads in double file(s)"
    fi

    have_mappings=0
    if [ ${#orig_mappings[@]} -ne 0 ]; then
	have_mappings=1
	make_note "found mappings"
    fi

    let n_inputs=$have_unpaired_reads+$have_paired_reads_single+$have_paired_reads_double+$have_mappings 1
    [ $n_inputs -ge 1 ] || crash "No inputs specified"
    [ $n_inputs -le 1 ] || crash "Too many inputs specified"

    if [ $have_mappings = 0 ]; then
	make_note "given reads only; need to map them"
	INPUT_PHRED=${INPUT_PHRED:-}
	[ ! $INPUT_PHRED ] || make_note "using global input PHRED: [$INPUT_PHRED]"
	rm -f $prefix.initial.pairing

	i=0
	while [ $i -lt ${#orig_read_groups[@]} ]; do
	    export RGID=${orig_read_groups[$i]}
	    rg_pairing=$prefix.pairing.$RGID.$i
	    rg_mapping=$prefix.map.$RGID.$i

	    if [ $have_unpaired_reads = 1 ]; then

		if [ $INPUT_PHRED ]; then
		    input_phred_rg=$INPUT_PHRED
		else
		    input_phred_rg=$(fq-detect-phred ${orig_unpaired_reads[$i]})
		    make_note "detected PHRED+$input_phred_rg for read group $RGID"
		fi

		STAGE_NUM=0.$i
		STAGE_NAME="original mappings for unpaired read group: $RGID"
		INPUT_FILES="${orig_unpaired_reads[$i]}"
		OUTPUT_FILES="$rg_mapping.sam.gz"
		stage_command() {
		    $PV ${orig_unpaired_reads[$i]} |
		    zc |
		    bowtie2 -p $NCPU -x $ref_bt2_idx -U - \
			--phred$input_phred_rg --rg-id $RGID --rg "SM:$sample" \
			2>$rg_mapping.log |
		    $ZIP >$rg_mapping.sam.gz
		}
		run_stage

	    elif [ $have_paired_reads_single = 1 ]; then

                if [ $INPUT_PHRED ]; then
                    input_phred_rg=$INPUT_PHRED
                else
                    input_phred_rg=$(fq-detect-phred ${orig_paired_reads[$i]})
		    make_note "detected PHRED+$input_phred_rg for read group $RGID"
                fi

		STAGE_NUM=0.$i.1
		STAGE_NAME="detect pairing for paired read group: $RGID"
		INPUT_FILES="${orig_paired_reads[$i]}"
		OUTPUT_FILES="$rg_pairing"
		stage_command() {
		    INPUT_PHRED=$input_phred_rg BOWTIE2_INDEX=$ref_bt2_idx \
			fq-detect-pairing ${orig_paired_reads[$i]} |
		    cut -f 3 >$rg_pairing
		}
		run_stage

		STAGE_NUM=0.$i.2
		STAGE_NAME="mapping for paired read group: $RGID"
		INPUT_FILES="${orig_paired_reads[$i]} $rg_pairing"
		OUTPUT_FILES="$rg_mapping.sam.gz"
		stage_command() {
		    $PV ${orig_paired_reads[$i]} |
		    zc |
		    split-file 4:- 4:/dev/null |
		    bowtie2 -p $NCPU -x $ref_bt2_idx \
			-1 - -2 <(zc ${orig_paired_reads[$i]} | split-file 4:/dev/null 4:-) \
			$(get-bowtie-pairing -p $(cat $rg_pairing)) \
			--phred$input_phred_rg --rg-id $RGID --rg "SM:$sample" \
			2>$rg_mapping.log |
		    tee >($ZIP >$rg_mapping.sam.gz) |
		    samtools view -Su - |
		    samtools flagstat - >$rg_mapping.stats
		}
		run_stage

	    else

                if [ $INPUT_PHRED ]; then
                    input_phred_rg=$INPUT_PHRED
                else
                    input_phred_rg=$(fq-detect-phred ${orig_reads_1[$i]})
		    make_note "detected PHRED+$input_phred_rg for read group $RGID"
                fi

		STAGE_NUM=0.$i.1
		STAGE_NAME="detect pairing for paired read group: $RGID"
		INPUT_FILES="${orig_reads_1[$i]} ${orig_reads_2[$i]}"
		OUTPUT_FILES="$rg_pairing"
		stage_command() {
		    INPUT_PHRED=$input_phred_rg BOWTIE2_INDEX=$ref_bt2_idx \
			fq-detect-pairing ${orig_reads_1[$i]} ${orig_reads_2[$i]} |
		    cut -f 3 >$rg_pairing
		}
		run_stage

		STAGE_NUM=0.$i.2
		STAGE_NAME="mapping for paired read group: $RGID"
		INPUT_FILES="${orig_reads_1[$i]} ${orig_reads_2[$i]} $rg_pairing"
		OUTPUT_FILES="$rg_mapping.sam.gz"
		stage_command() {
		    $PV ${orig_reads_1[$i]} |
		    zc |
		    bowtie2 -p $NCPU -x $ref_bt2_idx \
			-1 - -2 <(exec zc ${orig_reads_2[$i]}) \
			$(get-bowtie-pairing -p $(cat $rg_pairing)) \
			--phred$input_phred_rg --rg-id $RGID --rg "SM:$sample" \
			2>$rg_mapping.log |
		    tee >($ZIP >$rg_mapping.sam.gz) |
		    samtools view -Su - |
		    samtools flagstat - >$rg_mapping.stats
		}
		run_stage

	    fi

	    ORIG_MAPPINGS="$ORIG_MAPPINGS $rg_mapping.sam.gz"
	    let i+=1
	done
	orig_mappings=($(echo $ORIG_MAPPINGS))
	orig_read_groups=()
    fi
else
    ORIG_MAPPINGS=
fi


get_orig_mappings() {
    file=${orig_mappings[$1]}
    [ -r $file ] || crash "$file: file not found"
    rg=${orig_read_groups[$1]:-}
    command="$PV $file"
    is_bam=
    if (set +o pipefail; zc $file | head -n 1 | cut -c -3 | grep -q "BAM"); then
	is_bam=1
	command="$command | samtools view -h -"
    elif (set +o pipefail; file $file | grep -q gzip); then
	command="$command | $UNZIP"
    fi
    if [ ${DROP_PAIRS_DIFF_CHR:-} ]; then
	command="$command | tawk 'substr(\$1,1,1)==\"@\" || and(\$2,0x1)==0 || and(\$2,0x4)==1 || and(\$2,0x8)==1 || \$7==\"=\"'" 
    fi
    if [ ${add_dummy_pairs:-} ]; then
	command="$command | add-dummy-pairs"
    fi
    if (set +o pipefail; { if [ $is_bam ]; then exec samtools view -H $file; else exec zc $file; fi; } | head -n 1 | grep -q "coordinate") || [ "${RSORT:-}" ]; then
	command="$command | sam-rsort"
    fi
    if [ "$rg" ]; then
	command="$command | add-default-rg -r \"$rg\" -s \"$ngs_name\""
    fi
    make_note "command to get mappings: $command"
    eval $command
#    (set +e +o pipefail; eval $command | add-default-rg $rg || true)
}


#
# Stage 1: detect pairing information in mappings
#
STAGE_NUM=1
STAGE_NAME="detect pairing information"
pairing_file=$prefix.pairing
INPUT_FILES="$ORIG_MAPPINGS"
OUTPUT_FILES="$pairing_file"
stage_command() {
    rm -f $pairing_file.tmp
    i=0
    while [ $i -lt ${#orig_mappings[@]} ]; do
	no_sigpipe get_orig_mappings $i |
	detect-pairing -f >>$pairing_file.tmp
	let i+=1
    done
    sed 's/\(^.*stddev=\([0-9]*\),.*$\)/\1\t\2/' <$pairing_file.tmp |
    sort -s -k 1,1 -k 4,4n |
    cut -f 1-3 |
    tawk 'BEGIN{last=""} {if ($1!=last) print; last=$1}' >$pairing_file.tmp.uniq
    tawk -v n=$(wc -l <$pairing_file.tmp.uniq) \
	'{$2=NR-1; while (length($2)<length(n-1)) $2="0" $2; print}' \
	<$pairing_file.tmp.uniq >$pairing_file
}
run_stage

grep -q "paired=" $pairing_file || crash "could not determine pairing information"
rg_id=($(sort -s -k 2,2n $pairing_file | cut -f 2))
rg_string=($(sort -s -k 2,2n $pairing_file | cut -f 1))


#
# Stage 2: Extract discordant reads and rename them
#
# Input: mappings, reads
# Output: reads unmapped and reads mapped unpaired
#
STAGE_NUM=2
STAGE_NAME="extract discordant reads"
reads_to_remap=$prefix.reads.to_remap
INPUT_FILES="$ORIG_MAPPINGS"
OUTPUT_FILES=$(for rg in ${rg_string[@]}; do echo "$reads_to_remap.$rg."{1,2}".fq.gz"; done)
stage_command () {
    i=0
    while [ $i -lt ${#orig_mappings[@]} ]; do
	add_dummy_pairs=1 get_orig_mappings $i |
	add-extra-sam-flags -N 4 -l $pairing_file |
	filter-mappings -N 4 -l $pairing_file 3>/dev/null \
	    -f 0x10000,0x10000:\&3 \
	    \
	    -f 0x10000,0/0x6004:\&3 \
	    -f 0x10000,0:\&1 \
	    -f 0/0x6004,0x10000:\&3 \
	    -f 0,0x10000:\&1 \
	    \
	    -f 0x4,0:\&1 \
	    -f 0,0x4:\&1 \
	    -f 0/0x8000,0:\&1 \
	    -f 0/0x6000,/0x6000:\&3 \
	    -f 0,0:\&1 |
	sam-to-fq -s -l $pairing_file
	let i+=1
    done |
    fq-trim-illumina-reads -v input_phred=33 |
    fq-remove-short-paired-reads |
    fq-rename-paired-reads-with-len -v ofq=tfq |
    tawk '{split($1,a,":"); print a[1] "." a[3], $0;}' |
    split-file-by-field -r --prefix $reads_to_remap. --suffix .fq.gz \
	--cmd "fq-convert -v ofq=fq | gzip -9" \
	-d <(tawk '{print $2 ".1", $1 ".1"; print $2 ".2", $1 ".2";}' <$pairing_file)
}
run_stage


#
# Stage 3: Progressive mapping
#
# Input: reads to remap
# Output: mappings to reference, possibly trimmed
#
STAGE_NUM=3
STAGE_NAME="progressive mapping to reference"
mappings_to_reference=$prefix.map.to_reference
if [ "${SINGLE_READS_TO_REMAP:-}" ]; then
    INPUT_FILES="$reads_to_remap.fq.gz"
else
    INPUT_FILES=$(for rg in ${rg_string[@]}; do echo "$reads_to_remap.$rg."{1,2}".fq.gz"; done)
fi 
OUTPUT_FILES="$mappings_to_reference.sam.gz"
stage_command() {
    if [ "${SINGLE_READS_TO_REMAP:-}" ]; then
	BOWTIE2_INDEX=$ref_bt2_idx progressive-mapping "$reads_to_remap.fq.gz"
    else
	BOWTIE2_INDEX=$ref_bt2_idx progressive-mapping \
	    "$(for rg in ${rg_string[@]}; do echo "$reads_to_remap.$rg.1.fq.gz"; done)" \
	    "$(for rg in ${rg_string[@]}; do echo "$reads_to_remap.$rg.2.fq.gz"; done)"
    fi |
    tee >($ZIP >$mappings_to_reference.sam.gz) |
    samtools view -Su - |
    samtools flagstat - >$mappings_to_reference.stats
}
run_stage


#
# Stage 4: Clean reference mappings
#
# Input: mappings to reference
# Output: same, removing clones which are mapped as pairs
#
STAGE_NUM=4
STAGE_NAME="clean up reference mappings: remove unpaired and paired well; add orig reads and quals"
mappings_clean_to_reference=$prefix.map.clean_to_reference
INPUT_FILES="$mappings_to_reference.sam.gz"
OUTPUT_FILES="$mappings_clean_to_reference.sam.gz $mappings_clean_to_reference.stats"
stage_command() {
    $PV $mappings_to_reference.sam.gz |
    add-extra-sam-flags -N 4 -l $pairing_file -P |
    filter-mappings -N 4 -l $pairing_file -P 3>/dev/null \
	-f 0x10000,0x10000:\&3 \
	-f 0x10000,0x3000/0x4:\&1 \
	-f 0x10000,0x5000/0x4:\&1 \
	-f 0x10000,0:\&3 \
	-f 0x3000/0x4,0x10000:\&1 \
	-f 0x5000/0x4,0x10000:\&1 \
	-f 0,0x10000:\&3 \
	\
	-f 0x4,0x4:\&3 \
	-f 0x4,0/0x1000:\&3 \
	-f 0x4,0:\&1 \
	-f 0/0x1000,0x4:\&3 \
	-f 0,0x4:\&1 \
	\
	-f 0/0x1000,0/0x1000:\&3 \
	-f 0x8000/0x6000,0x8000/0x6000:\&3 \
	-f 0,0:\&1 |
    { sam-header $mappings_to_reference.sam.gz; exec cat; } |
    tee >($ZIP >$mappings_clean_to_reference.sam.gz) |
    samtools view -Su - |
    samtools flagstat - >$mappings_clean_to_reference.stats
}
run_stage


#
# Stage 5: Extract reads for alu mapping
#
# Input: clean mappings to reference
# Output: reads to map to alus
#
STAGE_NUM=5
STAGE_NAME="extract reads for alu mapping"
reads_for_alu_mapping=$prefix.reads.for_alu_mapping
INPUT_FILES="$mappings_clean_to_reference.sam.gz"
OUTPUT_FILES="$reads_for_alu_mapping.fq.gz $reads_for_alu_mapping.stats"
stage_command() {
    $PV $mappings_clean_to_reference.sam.gz |
    sam-body |
    reset-mqv-when-discordant 2>/dev/null |
    sam-to-fq-trimmed |
    fq-remove-short-reads |
    tee >($ZIP >$reads_for_alu_mapping.fq.gz) |
    fq-stats >$reads_for_alu_mapping.stats
}
run_stage


#
# Stage 6: Map to alus
#
# Input: reads to map to alus
# Output: mappings to alus
#
STAGE_NUM=6
STAGE_NAME="mapping to alus"
mappings_to_alus=$prefix.map.to_alus
gmapper_exec="gmapper-ls"
gmapper_options="-N $NCPU -n 1 --progress 10000 --qv-offset 33 -o 100 --local --no-mapping-qualities -r 180"
INPUT_FILES="$reads_for_alu_mapping.fq.gz"
OUTPUT_FILES="$mappings_to_alus.sam.gz"
stage_command() {
    $gmapper_exec $gmapper_options $reads_for_alu_mapping.fq.gz $alus_no_polya_fa \
	2>$mappings_to_alus.log |
    tee-p >($ZIP >$mappings_to_alus.sam.gz) |
    sam-body |
    cut -f 1 |
    {
	run_cmds "cut -d ':' -f 2,3 | uniq | wc -l" "cut -d ':' -f 2 | uniq | wc -l"
	echo "Reads mapped to alus: ${CMD_OUTPUT[1]}"
	echo "Clones mapped to alus: ${CMD_OUTPUT[2]}"
    } >$mappings_to_alus.stats
}
run_stage


#
# Stage 7: Get regions
#
# Input: clean mappings to reference, mappings to alus
# Output: regions with potential insertions
#
STAGE_NUM=7
STAGE_NAME="find potential insertions"
raw_calls=$prefix.calls.raw
INPUT_FILES="$mappings_clean_to_reference.sam.gz $mappings_to_alus.sam.gz"
OUTPUT_FILES="$raw_calls.bed"
stage_command() {
    get-regions -l $pairing_file -N $NCPU \
	$ref_fa $mappings_clean_to_reference.sam.gz \
	$alus_fa $mappings_to_alus.sam.gz \
	2> >($ZIP >$raw_calls.log.gz) |
    relabel-family |
    sed 's/Alu//g; s/Null://' >$raw_calls.bed
}
run_stage


#
# Stage 8: Apply basic filters to get novel insertions
#
# Input: raw calls
# Output: novel insertions
#
STAGE_NUM=8
STAGE_NAME="get novel insertions"
if [ -r "$targets_bed" ]; then
    # this is a fake reference
    clean_calls=$prefix.calls.clean
    if [ -r "$targets_near_alus_bed" ]; then
	clean_calls_near_alus=$prefix.calls.near-clear-alus
	clean_calls_near_alus_ref_alu_bp=$clean_calls_near_alus.ref-alu-bp
    fi
else
    clean_calls=$raw_calls
fi
clean_calls_ref_alu_bp=$clean_calls.ref-alu-bp
novel_calls=$prefix.calls.basic-filters
INPUT_FILES="$raw_calls.bed"
OUTPUT_FILES="$clean_calls_ref_alu_bp.bed $novel_calls.bed"
stage_command() {
    if [ -r "$targets_bed" ]; then
	{
	    intersectBed -u -s -a "$raw_calls.bed" -b "$targets_bed"
	    zc "$targets_bed" \
		<([ ! -r "$targets_bad_bed" ] || exec zc "$targets_bad_bed") \
		<([ ! -r "$ref_known_novel_alus" ] || exec zc "$ref_known_novel_alus") |
	    cut -f -6 |
	    intersectBed -v -s -a "$raw_calls".bed -b -
	} |
	sort -s -k 1,1 -k 2,2n >"$clean_calls".bed

	if [ -r "$targets_near_alus_bed" ]; then
	    {
		# 1: pass through calls that detect targets near clear alus
		intersectBed -u -s -a "$clean_calls".bed -b "$targets_near_alus_bed"
                # 2: from the rest, remove calls that detect other targets
		#    and keep only calls near clear alus
		intersectBed -v -s -a "$clean_calls".bed -b "$targets_bed" |
		intersectBed -u -a - -b <(exec extend-bed 100 "$ref_clear_alus_bed")
	    } >"$clean_calls_near_alus".bed
	    filter-ref-alu-bp "$ref_alus_bed" "$clean_calls_near_alus".bed \
		>"$clean_calls_near_alus_ref_alu_bp".bed
	fi
    fi

    filter-ref-alu-bp "$ref_alus_bed" "$clean_calls".bed >"$clean_calls_ref_alu_bp".bed

    filter-length 150 <"$clean_calls_ref_alu_bp".bed |
    filter-support 10 |
    filter-weak-null 200 |
    filter-ci-length 1100 >"$novel_calls".bed
}
run_stage
